/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.mosim.mmi.scene;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2023-06-29")
public class MSceneUpdate implements org.apache.thrift.TBase<MSceneUpdate, MSceneUpdate._Fields>, java.io.Serializable, Cloneable, Comparable<MSceneUpdate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MSceneUpdate");

  private static final org.apache.thrift.protocol.TField ADDED_SCENE_OBJECTS_FIELD_DESC = new org.apache.thrift.protocol.TField("AddedSceneObjects", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField CHANGED_SCENE_OBJECTS_FIELD_DESC = new org.apache.thrift.protocol.TField("ChangedSceneObjects", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField REMOVED_SCENE_OBJECTS_FIELD_DESC = new org.apache.thrift.protocol.TField("RemovedSceneObjects", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField ADDED_AVATARS_FIELD_DESC = new org.apache.thrift.protocol.TField("AddedAvatars", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField CHANGED_AVATARS_FIELD_DESC = new org.apache.thrift.protocol.TField("ChangedAvatars", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField REMOVED_AVATARS_FIELD_DESC = new org.apache.thrift.protocol.TField("RemovedAvatars", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MSceneUpdateStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MSceneUpdateTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<MSceneObject> AddedSceneObjects; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<MSceneObjectUpdate> ChangedSceneObjects; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> RemovedSceneObjects; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.avatar.MAvatar> AddedAvatars; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<MAvatarUpdate> ChangedAvatars; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> RemovedAvatars; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ADDED_SCENE_OBJECTS((short)1, "AddedSceneObjects"),
    CHANGED_SCENE_OBJECTS((short)2, "ChangedSceneObjects"),
    REMOVED_SCENE_OBJECTS((short)3, "RemovedSceneObjects"),
    ADDED_AVATARS((short)5, "AddedAvatars"),
    CHANGED_AVATARS((short)6, "ChangedAvatars"),
    REMOVED_AVATARS((short)7, "RemovedAvatars");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ADDED_SCENE_OBJECTS
          return ADDED_SCENE_OBJECTS;
        case 2: // CHANGED_SCENE_OBJECTS
          return CHANGED_SCENE_OBJECTS;
        case 3: // REMOVED_SCENE_OBJECTS
          return REMOVED_SCENE_OBJECTS;
        case 5: // ADDED_AVATARS
          return ADDED_AVATARS;
        case 6: // CHANGED_AVATARS
          return CHANGED_AVATARS;
        case 7: // REMOVED_AVATARS
          return REMOVED_AVATARS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ADDED_SCENE_OBJECTS,_Fields.CHANGED_SCENE_OBJECTS,_Fields.REMOVED_SCENE_OBJECTS,_Fields.ADDED_AVATARS,_Fields.CHANGED_AVATARS,_Fields.REMOVED_AVATARS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ADDED_SCENE_OBJECTS, new org.apache.thrift.meta_data.FieldMetaData("AddedSceneObjects", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MSceneObject.class))));
    tmpMap.put(_Fields.CHANGED_SCENE_OBJECTS, new org.apache.thrift.meta_data.FieldMetaData("ChangedSceneObjects", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MSceneObjectUpdate.class))));
    tmpMap.put(_Fields.REMOVED_SCENE_OBJECTS, new org.apache.thrift.meta_data.FieldMetaData("RemovedSceneObjects", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ADDED_AVATARS, new org.apache.thrift.meta_data.FieldMetaData("AddedAvatars", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.avatar.MAvatar.class))));
    tmpMap.put(_Fields.CHANGED_AVATARS, new org.apache.thrift.meta_data.FieldMetaData("ChangedAvatars", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "MAvatarUpdate"))));
    tmpMap.put(_Fields.REMOVED_AVATARS, new org.apache.thrift.meta_data.FieldMetaData("RemovedAvatars", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MSceneUpdate.class, metaDataMap);
  }

  public MSceneUpdate() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MSceneUpdate(MSceneUpdate other) {
    if (other.isSetAddedSceneObjects()) {
      java.util.List<MSceneObject> __this__AddedSceneObjects = new java.util.ArrayList<MSceneObject>(other.AddedSceneObjects.size());
      for (MSceneObject other_element : other.AddedSceneObjects) {
        __this__AddedSceneObjects.add(new MSceneObject(other_element));
      }
      this.AddedSceneObjects = __this__AddedSceneObjects;
    }
    if (other.isSetChangedSceneObjects()) {
      java.util.List<MSceneObjectUpdate> __this__ChangedSceneObjects = new java.util.ArrayList<MSceneObjectUpdate>(other.ChangedSceneObjects.size());
      for (MSceneObjectUpdate other_element : other.ChangedSceneObjects) {
        __this__ChangedSceneObjects.add(new MSceneObjectUpdate(other_element));
      }
      this.ChangedSceneObjects = __this__ChangedSceneObjects;
    }
    if (other.isSetRemovedSceneObjects()) {
      java.util.List<java.lang.String> __this__RemovedSceneObjects = new java.util.ArrayList<java.lang.String>(other.RemovedSceneObjects);
      this.RemovedSceneObjects = __this__RemovedSceneObjects;
    }
    if (other.isSetAddedAvatars()) {
      java.util.List<de.mosim.mmi.avatar.MAvatar> __this__AddedAvatars = new java.util.ArrayList<de.mosim.mmi.avatar.MAvatar>(other.AddedAvatars.size());
      for (de.mosim.mmi.avatar.MAvatar other_element : other.AddedAvatars) {
        __this__AddedAvatars.add(new de.mosim.mmi.avatar.MAvatar(other_element));
      }
      this.AddedAvatars = __this__AddedAvatars;
    }
    if (other.isSetChangedAvatars()) {
      java.util.List<MAvatarUpdate> __this__ChangedAvatars = new java.util.ArrayList<MAvatarUpdate>(other.ChangedAvatars.size());
      for (MAvatarUpdate other_element : other.ChangedAvatars) {
        __this__ChangedAvatars.add(new MAvatarUpdate(other_element));
      }
      this.ChangedAvatars = __this__ChangedAvatars;
    }
    if (other.isSetRemovedAvatars()) {
      java.util.List<java.lang.String> __this__RemovedAvatars = new java.util.ArrayList<java.lang.String>(other.RemovedAvatars);
      this.RemovedAvatars = __this__RemovedAvatars;
    }
  }

  public MSceneUpdate deepCopy() {
    return new MSceneUpdate(this);
  }

  @Override
  public void clear() {
    this.AddedSceneObjects = null;
    this.ChangedSceneObjects = null;
    this.RemovedSceneObjects = null;
    this.AddedAvatars = null;
    this.ChangedAvatars = null;
    this.RemovedAvatars = null;
  }

  public int getAddedSceneObjectsSize() {
    return (this.AddedSceneObjects == null) ? 0 : this.AddedSceneObjects.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<MSceneObject> getAddedSceneObjectsIterator() {
    return (this.AddedSceneObjects == null) ? null : this.AddedSceneObjects.iterator();
  }

  public void addToAddedSceneObjects(MSceneObject elem) {
    if (this.AddedSceneObjects == null) {
      this.AddedSceneObjects = new java.util.ArrayList<MSceneObject>();
    }
    this.AddedSceneObjects.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<MSceneObject> getAddedSceneObjects() {
    return this.AddedSceneObjects;
  }

  public MSceneUpdate setAddedSceneObjects(@org.apache.thrift.annotation.Nullable java.util.List<MSceneObject> AddedSceneObjects) {
    this.AddedSceneObjects = AddedSceneObjects;
    return this;
  }

  public void unsetAddedSceneObjects() {
    this.AddedSceneObjects = null;
  }

  /** Returns true if field AddedSceneObjects is set (has been assigned a value) and false otherwise */
  public boolean isSetAddedSceneObjects() {
    return this.AddedSceneObjects != null;
  }

  public void setAddedSceneObjectsIsSet(boolean value) {
    if (!value) {
      this.AddedSceneObjects = null;
    }
  }

  public int getChangedSceneObjectsSize() {
    return (this.ChangedSceneObjects == null) ? 0 : this.ChangedSceneObjects.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<MSceneObjectUpdate> getChangedSceneObjectsIterator() {
    return (this.ChangedSceneObjects == null) ? null : this.ChangedSceneObjects.iterator();
  }

  public void addToChangedSceneObjects(MSceneObjectUpdate elem) {
    if (this.ChangedSceneObjects == null) {
      this.ChangedSceneObjects = new java.util.ArrayList<MSceneObjectUpdate>();
    }
    this.ChangedSceneObjects.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<MSceneObjectUpdate> getChangedSceneObjects() {
    return this.ChangedSceneObjects;
  }

  public MSceneUpdate setChangedSceneObjects(@org.apache.thrift.annotation.Nullable java.util.List<MSceneObjectUpdate> ChangedSceneObjects) {
    this.ChangedSceneObjects = ChangedSceneObjects;
    return this;
  }

  public void unsetChangedSceneObjects() {
    this.ChangedSceneObjects = null;
  }

  /** Returns true if field ChangedSceneObjects is set (has been assigned a value) and false otherwise */
  public boolean isSetChangedSceneObjects() {
    return this.ChangedSceneObjects != null;
  }

  public void setChangedSceneObjectsIsSet(boolean value) {
    if (!value) {
      this.ChangedSceneObjects = null;
    }
  }

  public int getRemovedSceneObjectsSize() {
    return (this.RemovedSceneObjects == null) ? 0 : this.RemovedSceneObjects.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getRemovedSceneObjectsIterator() {
    return (this.RemovedSceneObjects == null) ? null : this.RemovedSceneObjects.iterator();
  }

  public void addToRemovedSceneObjects(java.lang.String elem) {
    if (this.RemovedSceneObjects == null) {
      this.RemovedSceneObjects = new java.util.ArrayList<java.lang.String>();
    }
    this.RemovedSceneObjects.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getRemovedSceneObjects() {
    return this.RemovedSceneObjects;
  }

  public MSceneUpdate setRemovedSceneObjects(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> RemovedSceneObjects) {
    this.RemovedSceneObjects = RemovedSceneObjects;
    return this;
  }

  public void unsetRemovedSceneObjects() {
    this.RemovedSceneObjects = null;
  }

  /** Returns true if field RemovedSceneObjects is set (has been assigned a value) and false otherwise */
  public boolean isSetRemovedSceneObjects() {
    return this.RemovedSceneObjects != null;
  }

  public void setRemovedSceneObjectsIsSet(boolean value) {
    if (!value) {
      this.RemovedSceneObjects = null;
    }
  }

  public int getAddedAvatarsSize() {
    return (this.AddedAvatars == null) ? 0 : this.AddedAvatars.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<de.mosim.mmi.avatar.MAvatar> getAddedAvatarsIterator() {
    return (this.AddedAvatars == null) ? null : this.AddedAvatars.iterator();
  }

  public void addToAddedAvatars(de.mosim.mmi.avatar.MAvatar elem) {
    if (this.AddedAvatars == null) {
      this.AddedAvatars = new java.util.ArrayList<de.mosim.mmi.avatar.MAvatar>();
    }
    this.AddedAvatars.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<de.mosim.mmi.avatar.MAvatar> getAddedAvatars() {
    return this.AddedAvatars;
  }

  public MSceneUpdate setAddedAvatars(@org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.avatar.MAvatar> AddedAvatars) {
    this.AddedAvatars = AddedAvatars;
    return this;
  }

  public void unsetAddedAvatars() {
    this.AddedAvatars = null;
  }

  /** Returns true if field AddedAvatars is set (has been assigned a value) and false otherwise */
  public boolean isSetAddedAvatars() {
    return this.AddedAvatars != null;
  }

  public void setAddedAvatarsIsSet(boolean value) {
    if (!value) {
      this.AddedAvatars = null;
    }
  }

  public int getChangedAvatarsSize() {
    return (this.ChangedAvatars == null) ? 0 : this.ChangedAvatars.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<MAvatarUpdate> getChangedAvatarsIterator() {
    return (this.ChangedAvatars == null) ? null : this.ChangedAvatars.iterator();
  }

  public void addToChangedAvatars(MAvatarUpdate elem) {
    if (this.ChangedAvatars == null) {
      this.ChangedAvatars = new java.util.ArrayList<MAvatarUpdate>();
    }
    this.ChangedAvatars.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<MAvatarUpdate> getChangedAvatars() {
    return this.ChangedAvatars;
  }

  public MSceneUpdate setChangedAvatars(@org.apache.thrift.annotation.Nullable java.util.List<MAvatarUpdate> ChangedAvatars) {
    this.ChangedAvatars = ChangedAvatars;
    return this;
  }

  public void unsetChangedAvatars() {
    this.ChangedAvatars = null;
  }

  /** Returns true if field ChangedAvatars is set (has been assigned a value) and false otherwise */
  public boolean isSetChangedAvatars() {
    return this.ChangedAvatars != null;
  }

  public void setChangedAvatarsIsSet(boolean value) {
    if (!value) {
      this.ChangedAvatars = null;
    }
  }

  public int getRemovedAvatarsSize() {
    return (this.RemovedAvatars == null) ? 0 : this.RemovedAvatars.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getRemovedAvatarsIterator() {
    return (this.RemovedAvatars == null) ? null : this.RemovedAvatars.iterator();
  }

  public void addToRemovedAvatars(java.lang.String elem) {
    if (this.RemovedAvatars == null) {
      this.RemovedAvatars = new java.util.ArrayList<java.lang.String>();
    }
    this.RemovedAvatars.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getRemovedAvatars() {
    return this.RemovedAvatars;
  }

  public MSceneUpdate setRemovedAvatars(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> RemovedAvatars) {
    this.RemovedAvatars = RemovedAvatars;
    return this;
  }

  public void unsetRemovedAvatars() {
    this.RemovedAvatars = null;
  }

  /** Returns true if field RemovedAvatars is set (has been assigned a value) and false otherwise */
  public boolean isSetRemovedAvatars() {
    return this.RemovedAvatars != null;
  }

  public void setRemovedAvatarsIsSet(boolean value) {
    if (!value) {
      this.RemovedAvatars = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ADDED_SCENE_OBJECTS:
      if (value == null) {
        unsetAddedSceneObjects();
      } else {
        setAddedSceneObjects((java.util.List<MSceneObject>)value);
      }
      break;

    case CHANGED_SCENE_OBJECTS:
      if (value == null) {
        unsetChangedSceneObjects();
      } else {
        setChangedSceneObjects((java.util.List<MSceneObjectUpdate>)value);
      }
      break;

    case REMOVED_SCENE_OBJECTS:
      if (value == null) {
        unsetRemovedSceneObjects();
      } else {
        setRemovedSceneObjects((java.util.List<java.lang.String>)value);
      }
      break;

    case ADDED_AVATARS:
      if (value == null) {
        unsetAddedAvatars();
      } else {
        setAddedAvatars((java.util.List<de.mosim.mmi.avatar.MAvatar>)value);
      }
      break;

    case CHANGED_AVATARS:
      if (value == null) {
        unsetChangedAvatars();
      } else {
        setChangedAvatars((java.util.List<MAvatarUpdate>)value);
      }
      break;

    case REMOVED_AVATARS:
      if (value == null) {
        unsetRemovedAvatars();
      } else {
        setRemovedAvatars((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ADDED_SCENE_OBJECTS:
      return getAddedSceneObjects();

    case CHANGED_SCENE_OBJECTS:
      return getChangedSceneObjects();

    case REMOVED_SCENE_OBJECTS:
      return getRemovedSceneObjects();

    case ADDED_AVATARS:
      return getAddedAvatars();

    case CHANGED_AVATARS:
      return getChangedAvatars();

    case REMOVED_AVATARS:
      return getRemovedAvatars();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ADDED_SCENE_OBJECTS:
      return isSetAddedSceneObjects();
    case CHANGED_SCENE_OBJECTS:
      return isSetChangedSceneObjects();
    case REMOVED_SCENE_OBJECTS:
      return isSetRemovedSceneObjects();
    case ADDED_AVATARS:
      return isSetAddedAvatars();
    case CHANGED_AVATARS:
      return isSetChangedAvatars();
    case REMOVED_AVATARS:
      return isSetRemovedAvatars();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MSceneUpdate)
      return this.equals((MSceneUpdate)that);
    return false;
  }

  public boolean equals(MSceneUpdate that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_AddedSceneObjects = true && this.isSetAddedSceneObjects();
    boolean that_present_AddedSceneObjects = true && that.isSetAddedSceneObjects();
    if (this_present_AddedSceneObjects || that_present_AddedSceneObjects) {
      if (!(this_present_AddedSceneObjects && that_present_AddedSceneObjects))
        return false;
      if (!this.AddedSceneObjects.equals(that.AddedSceneObjects))
        return false;
    }

    boolean this_present_ChangedSceneObjects = true && this.isSetChangedSceneObjects();
    boolean that_present_ChangedSceneObjects = true && that.isSetChangedSceneObjects();
    if (this_present_ChangedSceneObjects || that_present_ChangedSceneObjects) {
      if (!(this_present_ChangedSceneObjects && that_present_ChangedSceneObjects))
        return false;
      if (!this.ChangedSceneObjects.equals(that.ChangedSceneObjects))
        return false;
    }

    boolean this_present_RemovedSceneObjects = true && this.isSetRemovedSceneObjects();
    boolean that_present_RemovedSceneObjects = true && that.isSetRemovedSceneObjects();
    if (this_present_RemovedSceneObjects || that_present_RemovedSceneObjects) {
      if (!(this_present_RemovedSceneObjects && that_present_RemovedSceneObjects))
        return false;
      if (!this.RemovedSceneObjects.equals(that.RemovedSceneObjects))
        return false;
    }

    boolean this_present_AddedAvatars = true && this.isSetAddedAvatars();
    boolean that_present_AddedAvatars = true && that.isSetAddedAvatars();
    if (this_present_AddedAvatars || that_present_AddedAvatars) {
      if (!(this_present_AddedAvatars && that_present_AddedAvatars))
        return false;
      if (!this.AddedAvatars.equals(that.AddedAvatars))
        return false;
    }

    boolean this_present_ChangedAvatars = true && this.isSetChangedAvatars();
    boolean that_present_ChangedAvatars = true && that.isSetChangedAvatars();
    if (this_present_ChangedAvatars || that_present_ChangedAvatars) {
      if (!(this_present_ChangedAvatars && that_present_ChangedAvatars))
        return false;
      if (!this.ChangedAvatars.equals(that.ChangedAvatars))
        return false;
    }

    boolean this_present_RemovedAvatars = true && this.isSetRemovedAvatars();
    boolean that_present_RemovedAvatars = true && that.isSetRemovedAvatars();
    if (this_present_RemovedAvatars || that_present_RemovedAvatars) {
      if (!(this_present_RemovedAvatars && that_present_RemovedAvatars))
        return false;
      if (!this.RemovedAvatars.equals(that.RemovedAvatars))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAddedSceneObjects()) ? 131071 : 524287);
    if (isSetAddedSceneObjects())
      hashCode = hashCode * 8191 + AddedSceneObjects.hashCode();

    hashCode = hashCode * 8191 + ((isSetChangedSceneObjects()) ? 131071 : 524287);
    if (isSetChangedSceneObjects())
      hashCode = hashCode * 8191 + ChangedSceneObjects.hashCode();

    hashCode = hashCode * 8191 + ((isSetRemovedSceneObjects()) ? 131071 : 524287);
    if (isSetRemovedSceneObjects())
      hashCode = hashCode * 8191 + RemovedSceneObjects.hashCode();

    hashCode = hashCode * 8191 + ((isSetAddedAvatars()) ? 131071 : 524287);
    if (isSetAddedAvatars())
      hashCode = hashCode * 8191 + AddedAvatars.hashCode();

    hashCode = hashCode * 8191 + ((isSetChangedAvatars()) ? 131071 : 524287);
    if (isSetChangedAvatars())
      hashCode = hashCode * 8191 + ChangedAvatars.hashCode();

    hashCode = hashCode * 8191 + ((isSetRemovedAvatars()) ? 131071 : 524287);
    if (isSetRemovedAvatars())
      hashCode = hashCode * 8191 + RemovedAvatars.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MSceneUpdate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAddedSceneObjects()).compareTo(other.isSetAddedSceneObjects());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddedSceneObjects()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AddedSceneObjects, other.AddedSceneObjects);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChangedSceneObjects()).compareTo(other.isSetChangedSceneObjects());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChangedSceneObjects()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ChangedSceneObjects, other.ChangedSceneObjects);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRemovedSceneObjects()).compareTo(other.isSetRemovedSceneObjects());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemovedSceneObjects()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RemovedSceneObjects, other.RemovedSceneObjects);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAddedAvatars()).compareTo(other.isSetAddedAvatars());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddedAvatars()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AddedAvatars, other.AddedAvatars);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChangedAvatars()).compareTo(other.isSetChangedAvatars());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChangedAvatars()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ChangedAvatars, other.ChangedAvatars);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRemovedAvatars()).compareTo(other.isSetRemovedAvatars());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemovedAvatars()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RemovedAvatars, other.RemovedAvatars);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MSceneUpdate(");
    boolean first = true;

    if (isSetAddedSceneObjects()) {
      sb.append("AddedSceneObjects:");
      if (this.AddedSceneObjects == null) {
        sb.append("null");
      } else {
        sb.append(this.AddedSceneObjects);
      }
      first = false;
    }
    if (isSetChangedSceneObjects()) {
      if (!first) sb.append(", ");
      sb.append("ChangedSceneObjects:");
      if (this.ChangedSceneObjects == null) {
        sb.append("null");
      } else {
        sb.append(this.ChangedSceneObjects);
      }
      first = false;
    }
    if (isSetRemovedSceneObjects()) {
      if (!first) sb.append(", ");
      sb.append("RemovedSceneObjects:");
      if (this.RemovedSceneObjects == null) {
        sb.append("null");
      } else {
        sb.append(this.RemovedSceneObjects);
      }
      first = false;
    }
    if (isSetAddedAvatars()) {
      if (!first) sb.append(", ");
      sb.append("AddedAvatars:");
      if (this.AddedAvatars == null) {
        sb.append("null");
      } else {
        sb.append(this.AddedAvatars);
      }
      first = false;
    }
    if (isSetChangedAvatars()) {
      if (!first) sb.append(", ");
      sb.append("ChangedAvatars:");
      if (this.ChangedAvatars == null) {
        sb.append("null");
      } else {
        sb.append(this.ChangedAvatars);
      }
      first = false;
    }
    if (isSetRemovedAvatars()) {
      if (!first) sb.append(", ");
      sb.append("RemovedAvatars:");
      if (this.RemovedAvatars == null) {
        sb.append("null");
      } else {
        sb.append(this.RemovedAvatars);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MSceneUpdateStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MSceneUpdateStandardScheme getScheme() {
      return new MSceneUpdateStandardScheme();
    }
  }

  private static class MSceneUpdateStandardScheme extends org.apache.thrift.scheme.StandardScheme<MSceneUpdate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MSceneUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ADDED_SCENE_OBJECTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list292 = iprot.readListBegin();
                struct.AddedSceneObjects = new java.util.ArrayList<MSceneObject>(_list292.size);
                @org.apache.thrift.annotation.Nullable MSceneObject _elem293;
                for (int _i294 = 0; _i294 < _list292.size; ++_i294)
                {
                  _elem293 = new MSceneObject();
                  _elem293.read(iprot);
                  struct.AddedSceneObjects.add(_elem293);
                }
                iprot.readListEnd();
              }
              struct.setAddedSceneObjectsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHANGED_SCENE_OBJECTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list295 = iprot.readListBegin();
                struct.ChangedSceneObjects = new java.util.ArrayList<MSceneObjectUpdate>(_list295.size);
                @org.apache.thrift.annotation.Nullable MSceneObjectUpdate _elem296;
                for (int _i297 = 0; _i297 < _list295.size; ++_i297)
                {
                  _elem296 = new MSceneObjectUpdate();
                  _elem296.read(iprot);
                  struct.ChangedSceneObjects.add(_elem296);
                }
                iprot.readListEnd();
              }
              struct.setChangedSceneObjectsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REMOVED_SCENE_OBJECTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list298 = iprot.readListBegin();
                struct.RemovedSceneObjects = new java.util.ArrayList<java.lang.String>(_list298.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem299;
                for (int _i300 = 0; _i300 < _list298.size; ++_i300)
                {
                  _elem299 = iprot.readString();
                  struct.RemovedSceneObjects.add(_elem299);
                }
                iprot.readListEnd();
              }
              struct.setRemovedSceneObjectsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ADDED_AVATARS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list301 = iprot.readListBegin();
                struct.AddedAvatars = new java.util.ArrayList<de.mosim.mmi.avatar.MAvatar>(_list301.size);
                @org.apache.thrift.annotation.Nullable de.mosim.mmi.avatar.MAvatar _elem302;
                for (int _i303 = 0; _i303 < _list301.size; ++_i303)
                {
                  _elem302 = new de.mosim.mmi.avatar.MAvatar();
                  _elem302.read(iprot);
                  struct.AddedAvatars.add(_elem302);
                }
                iprot.readListEnd();
              }
              struct.setAddedAvatarsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHANGED_AVATARS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list304 = iprot.readListBegin();
                struct.ChangedAvatars = new java.util.ArrayList<MAvatarUpdate>(_list304.size);
                @org.apache.thrift.annotation.Nullable MAvatarUpdate _elem305;
                for (int _i306 = 0; _i306 < _list304.size; ++_i306)
                {
                  _elem305 = new MAvatarUpdate();
                  _elem305.read(iprot);
                  struct.ChangedAvatars.add(_elem305);
                }
                iprot.readListEnd();
              }
              struct.setChangedAvatarsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REMOVED_AVATARS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list307 = iprot.readListBegin();
                struct.RemovedAvatars = new java.util.ArrayList<java.lang.String>(_list307.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem308;
                for (int _i309 = 0; _i309 < _list307.size; ++_i309)
                {
                  _elem308 = iprot.readString();
                  struct.RemovedAvatars.add(_elem308);
                }
                iprot.readListEnd();
              }
              struct.setRemovedAvatarsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MSceneUpdate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.AddedSceneObjects != null) {
        if (struct.isSetAddedSceneObjects()) {
          oprot.writeFieldBegin(ADDED_SCENE_OBJECTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.AddedSceneObjects.size()));
            for (MSceneObject _iter310 : struct.AddedSceneObjects)
            {
              _iter310.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.ChangedSceneObjects != null) {
        if (struct.isSetChangedSceneObjects()) {
          oprot.writeFieldBegin(CHANGED_SCENE_OBJECTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ChangedSceneObjects.size()));
            for (MSceneObjectUpdate _iter311 : struct.ChangedSceneObjects)
            {
              _iter311.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.RemovedSceneObjects != null) {
        if (struct.isSetRemovedSceneObjects()) {
          oprot.writeFieldBegin(REMOVED_SCENE_OBJECTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.RemovedSceneObjects.size()));
            for (java.lang.String _iter312 : struct.RemovedSceneObjects)
            {
              oprot.writeString(_iter312);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.AddedAvatars != null) {
        if (struct.isSetAddedAvatars()) {
          oprot.writeFieldBegin(ADDED_AVATARS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.AddedAvatars.size()));
            for (de.mosim.mmi.avatar.MAvatar _iter313 : struct.AddedAvatars)
            {
              _iter313.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.ChangedAvatars != null) {
        if (struct.isSetChangedAvatars()) {
          oprot.writeFieldBegin(CHANGED_AVATARS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ChangedAvatars.size()));
            for (MAvatarUpdate _iter314 : struct.ChangedAvatars)
            {
              _iter314.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.RemovedAvatars != null) {
        if (struct.isSetRemovedAvatars()) {
          oprot.writeFieldBegin(REMOVED_AVATARS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.RemovedAvatars.size()));
            for (java.lang.String _iter315 : struct.RemovedAvatars)
            {
              oprot.writeString(_iter315);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MSceneUpdateTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MSceneUpdateTupleScheme getScheme() {
      return new MSceneUpdateTupleScheme();
    }
  }

  private static class MSceneUpdateTupleScheme extends org.apache.thrift.scheme.TupleScheme<MSceneUpdate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MSceneUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAddedSceneObjects()) {
        optionals.set(0);
      }
      if (struct.isSetChangedSceneObjects()) {
        optionals.set(1);
      }
      if (struct.isSetRemovedSceneObjects()) {
        optionals.set(2);
      }
      if (struct.isSetAddedAvatars()) {
        optionals.set(3);
      }
      if (struct.isSetChangedAvatars()) {
        optionals.set(4);
      }
      if (struct.isSetRemovedAvatars()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetAddedSceneObjects()) {
        {
          oprot.writeI32(struct.AddedSceneObjects.size());
          for (MSceneObject _iter316 : struct.AddedSceneObjects)
          {
            _iter316.write(oprot);
          }
        }
      }
      if (struct.isSetChangedSceneObjects()) {
        {
          oprot.writeI32(struct.ChangedSceneObjects.size());
          for (MSceneObjectUpdate _iter317 : struct.ChangedSceneObjects)
          {
            _iter317.write(oprot);
          }
        }
      }
      if (struct.isSetRemovedSceneObjects()) {
        {
          oprot.writeI32(struct.RemovedSceneObjects.size());
          for (java.lang.String _iter318 : struct.RemovedSceneObjects)
          {
            oprot.writeString(_iter318);
          }
        }
      }
      if (struct.isSetAddedAvatars()) {
        {
          oprot.writeI32(struct.AddedAvatars.size());
          for (de.mosim.mmi.avatar.MAvatar _iter319 : struct.AddedAvatars)
          {
            _iter319.write(oprot);
          }
        }
      }
      if (struct.isSetChangedAvatars()) {
        {
          oprot.writeI32(struct.ChangedAvatars.size());
          for (MAvatarUpdate _iter320 : struct.ChangedAvatars)
          {
            _iter320.write(oprot);
          }
        }
      }
      if (struct.isSetRemovedAvatars()) {
        {
          oprot.writeI32(struct.RemovedAvatars.size());
          for (java.lang.String _iter321 : struct.RemovedAvatars)
          {
            oprot.writeString(_iter321);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MSceneUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list322 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.AddedSceneObjects = new java.util.ArrayList<MSceneObject>(_list322.size);
          @org.apache.thrift.annotation.Nullable MSceneObject _elem323;
          for (int _i324 = 0; _i324 < _list322.size; ++_i324)
          {
            _elem323 = new MSceneObject();
            _elem323.read(iprot);
            struct.AddedSceneObjects.add(_elem323);
          }
        }
        struct.setAddedSceneObjectsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list325 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ChangedSceneObjects = new java.util.ArrayList<MSceneObjectUpdate>(_list325.size);
          @org.apache.thrift.annotation.Nullable MSceneObjectUpdate _elem326;
          for (int _i327 = 0; _i327 < _list325.size; ++_i327)
          {
            _elem326 = new MSceneObjectUpdate();
            _elem326.read(iprot);
            struct.ChangedSceneObjects.add(_elem326);
          }
        }
        struct.setChangedSceneObjectsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list328 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.RemovedSceneObjects = new java.util.ArrayList<java.lang.String>(_list328.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem329;
          for (int _i330 = 0; _i330 < _list328.size; ++_i330)
          {
            _elem329 = iprot.readString();
            struct.RemovedSceneObjects.add(_elem329);
          }
        }
        struct.setRemovedSceneObjectsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list331 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.AddedAvatars = new java.util.ArrayList<de.mosim.mmi.avatar.MAvatar>(_list331.size);
          @org.apache.thrift.annotation.Nullable de.mosim.mmi.avatar.MAvatar _elem332;
          for (int _i333 = 0; _i333 < _list331.size; ++_i333)
          {
            _elem332 = new de.mosim.mmi.avatar.MAvatar();
            _elem332.read(iprot);
            struct.AddedAvatars.add(_elem332);
          }
        }
        struct.setAddedAvatarsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list334 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ChangedAvatars = new java.util.ArrayList<MAvatarUpdate>(_list334.size);
          @org.apache.thrift.annotation.Nullable MAvatarUpdate _elem335;
          for (int _i336 = 0; _i336 < _list334.size; ++_i336)
          {
            _elem335 = new MAvatarUpdate();
            _elem335.read(iprot);
            struct.ChangedAvatars.add(_elem335);
          }
        }
        struct.setChangedAvatarsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list337 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.RemovedAvatars = new java.util.ArrayList<java.lang.String>(_list337.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem338;
          for (int _i339 = 0; _i339 < _list337.size; ++_i339)
          {
            _elem338 = iprot.readString();
            struct.RemovedAvatars.add(_elem338);
          }
        }
        struct.setRemovedAvatarsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

