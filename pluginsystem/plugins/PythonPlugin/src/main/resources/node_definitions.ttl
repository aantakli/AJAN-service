@prefix : <http://localhost:8090/rdf4j/repositories/node_definitions#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix http-core: <http://www.w3.org/2006/http#> .
@prefix http-headers: <http://www.w3.org/2008/http-headers#> .
@prefix http-methods: <http://www.w3.org/2008/http-methods#> .
@prefix strips: <http://www.ajan.de/behavior/strips-ns#> .
@prefix bt: <http://www.ajan.de/behavior/bt-ns#> .
@prefix poser: <http://www.ajan.de/poser-ns#> .

@prefix metagol: <http://www.ajan.de/behavior/metagol-ns#> .

@prefix nd: <http://www.ajan.de/behavior/nd-ns#> .
@prefix clingo: <http://www.ajan.de/behavior/clingo-ns#> .
@prefix ajan: <http://www.ajan.de/ajan-ns#> .
@prefix asp: <http://www.ajan.de/behavior/asp-ns#> .
@prefix actn: <http://www.ajan.de/actn#> .
@prefix steer: <http://www.ajan.de/behavior/steer-ns#> .
@prefix ml: <http://www.ajan.de/behavior/ml-ns#> .
@prefix hybrit: <http://www.dfki.de/hybrit-ns#> .
@prefix bt-mosim: <http://www.ajan.de/behavior/mosim-ns#> .
@prefix bt-mqtt: <http://www.ajan.de/behavior/mqtt-ns#> .
@prefix tcp: <http://www.ajan.de/behavior/tcp-ns#> .
@prefix python: <http://www.ajan.de/behavior/python-ns#> .
@prefix ws: <http://bla/ws#> .



:PythonLeafNode nd:class nd:Leaf;
	nd:category "Python Nodes";
    nd:name "PythonLeafNode";
    nd:labelType nd:Dynamic;
    rdfs:label "DefaultPythonLeafNode";
    nd:type python:LeafNode;
    nd:style [
        a nd:StyleDef;
        nd:color "#c9c308";
		nd:shape nd:Polygon;
        nd:polygon "[-0.9, 0, -1, 1, 0.9, 1, 1, 0, 0.9, -1, -1, -1]";
        nd:padding "700%";
        nd:paddingTo "width";
        nd:icon "";
    ];
    nd:parameter [
	    a nd:Parameter;
	    nd:mapsTo python:input;
	    nd:title "Python Input";
	    nd:input nd:Query;
        bt:originBase "true";
        bt:targetBase "false";
        nd:type bt:ConstructQuery;
    ];
	nd:parameter [
	    a nd:Parameter;
	    nd:mapsTo python:script;
	    nd:title "Python Script";
	    nd:input nd:textarea;
        nd:default "import AJANlib\nimport rdflib\n\n\nclass MyNode(AJANlib.LeafNode):\n\tdef executeLeafNode(self, input: rdflib.Graph):\n\t\treturn AJANlib.NodeResult(status=AJANlib.Status.SUCCEEDED, label='Hallo World!', rdf_output=input)\n\n\tdef getClassName(self):\n\t\treturn 'MyNode'";
        nd:title "Name";
    ];
	nd:parameter [
	    a nd:Parameter;
	    nd:mapsTo bt:targetBase;
	    nd:title "Target Base";
	    nd:input nd:Repo;
    ].

