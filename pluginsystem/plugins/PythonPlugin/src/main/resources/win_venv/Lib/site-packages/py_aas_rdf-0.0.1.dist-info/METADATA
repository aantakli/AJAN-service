Metadata-Version: 2.2
Name: py_aas_rdf
Version: 0.0.1
Summary: Utility library to de-/serialize AAS in RDF and JSON.
Home-page: https://github.com/mhrimaz/py-aas-rdf
Author: Mohammad Hossein Rimaz
Author-email: hossein.rimaz@mycompany.de
License: MIT license
Keywords: py_aas_rdf asset administration shell sdk industry 4.0 industrie i4.0 industry iot iiot
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.8
License-File: LICENSE
License-File: AUTHORS.rst
Requires-Dist: pydantic<2.2,>=2.0
Requires-Dist: rdflib>=7
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: home-page
Dynamic: keywords
Dynamic: license
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

==========
py-aas-rdf 
==========

py-aas-rdf allows you to convert AAS/JSON to AAS/RDF and vice versa according to the official RDF representaiton. 

Installation
===================

``!pip install git+https://github.com/mhrimaz/py-aas-rdf.git@main --quiet``

Python Code Example
===================
.. code-block:: python

    from py_aas_rdf.models.submodel import Submodel
    from py_aas_rdf.models.property import Property
    import json
    
    graph, node = Submodel(**{"id":"test", "modelType":"Submodel"}).to_rdf()
    print(graph.serialize(format="turtle_custom"))

You can find in this Jupyter Notebook (https://colab.research.google.com/drive/1CwNy18p6gSNmHWd4Ng6F7z0a0XRf3WjY?usp=sharing) an example that showcase how SPARQL can be used to query the Asset Administration Shell.


=======
History
=======

0.0.1 (2024-01-22)
------------------

* First release on PyPI.
