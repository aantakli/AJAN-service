# @base <http://localhost:8090/rdf4j/repositories/domain#> .

@prefix agents: <http://localhost:8090/rdf4j/repositories/agents#> .
@prefix behaviors: <http://localhost:8090/rdf4j/repositories/behaviors#> .
@prefix : <http://localhost:8090/rdf4j/repositories/domain#> .
@prefix services: <http://localhost:8090/rdf4j/repositories/services#> .

@prefix dct: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix ajan: <http://www.ajan.de/ajan-ns#> .
@prefix bt: <http://www.ajan.de/behavior/bt-ns#> .
@prefix asp: <http://www.ajan.de/behavior/asp-ns#> .
@prefix twinmap: <http://www.dfki.de/twinmap-ns#> .
@prefix aitoc: <http://www.dfki.de/aitoc-ns#> .
@prefix suite: <http://www.dfki.de/suite-ns#> .
@prefix aml: <https://w3id.org/i40/aml#> .
@prefix test: <http://test.de#> .
@prefix wgs84_pos: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix transit: <http://vocab.org/transit/terms/> .
@prefix gn: <http://www.geonames.org/ontology#> .
@prefix ctd: <http://connectd.api/> .
@prefix iots: <http://iotschema.org/> .
@prefix json: <http://some.json.ontology/> .
@prefix ar: <http://aitoc.eu/active-registry-ns#> .

@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix ex:     <http://www.example.com/> .
@prefix carml: <http://carml.taxonic.com/carml/> .



# --------------------------------------------
# --------------- RML Mappings ---------------
# --------------------------------------------

# Input: 
# 	{ "tasks": [
#		{
#		"id": 1,
#		"operation": "position",
#		"part": "partname or id - we can first use ID if it makes it easier for you",
#		"tool": "left hand",
#		"finallocation": "part name or id of the dummy element"
#		},
#		{
#		"id": 2,
#		"operation": "tighten final",
#		"part": "partname or id - we can first use ID if it makes it easier for you",
#		"tool": "pneumatic wrench",
#		"finallocation": "part name or id of the dummy element in the scene"
#		}
#	] }
# Event: agents:JsonEvent
# Output: <http://www.ajan.de/ajan-mapping-ns#Distance> rdf:type <http://www.dfki.de/hybrit-ns#Distance> ;					[agents:JsonEvent]
#														<http://www.ajan.de/ajan-mapping-ns#value> "10.0"^^xsd:double . 	[agents:JsonEvent]

ajan:TBox {
	twinmap:Avatar rdfs:subClassOf twinmap:AnimatedObject .
	twinmap:Avatar rdfs:subClassOf twinmap:Object .
}

# --------------------------------------------
# ----------------- ASP Rules ----------------
# --------------------------------------------

ajan:ASP {
	:Plain_Rules
		a asp:RuleSet ;
		asp:facts (
			:Andre
		) ;
		asp:rules (
			:Mortal
		) .
	
	:Andre a asp:Fact ;
		asp:predicate "human" ;
		asp:terms ([
			  a asp:Constant ;
			  asp:value "andre" ]) .

	:Mortal a asp:Rule ;
		asp:head [ 
			a asp:Fact ;
			asp:predicate "mortal" ;
			asp:terms ([
			  a asp:Variable ;
			  asp:value "X" ]
			)
		] ;
		asp:body [
			a asp:Body ;
			asp:atoms ([
				a asp:Atom ;
				asp:predicate "human" ;
				asp:terms ([
				  a asp:Variable ;
				  asp:value "X" ]
				)]
			)
		] .

	:Python_Example
		a asp:RuleSet ;
		asp:asRules """
			#script (python)
			import clingo
			class Context:
				def id(self, x):
					return x

				def seq(self, x, y):
					return [x, y]

			def main(prg):
				prg.ground([("base", [])], context=Context())
				prg.solve()
			#end.

			p(@id(10)).
			q(@seq(1,2)).
		"""^^xsd:string .

	:Domain_Rules
		a asp:RuleSet ;
		asp:asRules """
			_p("rdf", "http://www.w3.org/1999/02/22-rdf-syntax-ns#") .
			_p("xsd", "http://www.w3.org/2001/XMLSchema#") .
			_p("react", "http://www.dfki.de/react-ns#") .

			_t(S,"init_cost",1) :- _t(S,"react:cost",_l("1","xsd:string")).
			_t(S,"init_cost",2) :- _t(S,"react:cost",_l("2","xsd:string")).
			_t(S,"init_cost",3) :- _t(S,"react:cost",_l("3","xsd:string")).
			_t(S,"init_cost",4) :- _t(S,"react:cost",_l("4","xsd:string")).
			_t(S,"init_cost",5) :- _t(S,"react:cost",_l("5","xsd:string")).

			_t(S,"cost",C1+2) :- _t(S,"init_cost",C1), _t(S,"react:isIn",A), _t(A,"rdf:type","react:ZebraCrossing").
			_t(S,"cost",C1+5) :- _t(S,"init_cost",C1), _t(S,"react:isIn",A), _t(A,"rdf:type","react:Street").
			_t(S,"cost",C1+5) :- _t(S,"init_cost",C1), _t(S,"react:isIn",A), _t(A,"rdf:type","react:PedestrianCrossing").
			_t(S,"cost",C1+1) :- _t(S,"init_cost",C1), _t(S,"react:isIn",A), _t(A,"rdf:type","react:ShoppingWalk").
			_t(S,"cost",C1+1) :- _t(S,"init_cost",C1), _t(S,"react:isIn",A), _t(A,"rdf:type","react:BusStop").
			_t(S,"cost",C1+1) :- _t(S,"init_cost",C1), _t(S,"react:isIn",A), _t(A,"rdf:type","react:PedestrianWalk").
			_t(S,"cost",C1-1) :- _t(S,"init_cost",C1), _t(S,"react:isIn",A), _t(A,"rdf:type","react:YogaStand").

			node(N) :- 		_t(S,"react:position",N),
							_t(S,"rdf:type","react:POI").
			edge(I,O,C) :- 	_t(E,"rdf:type","react:Edge"),
							_t(E,"react:in",I),
							_t(E,"react:out",O),
							_t(E,"cost",C), not _t(I,"react:notReachable",O).
			at(X,0) :- 		_t(A,"react:locatedNextTo",X),
							_t(A,"rdf:type","react:Avatar").

			goal(_l("Ende_ASP","xsd:string")).

			_t(_b(X),"react:move",X) :- move(X,_).
			_t(_b(X),"react:time",T) :- move(X,T).
			_t(_b("Cost"),"react:totalCost",C) :- cost(C).
		"""^^xsd:string .

	:MoveTo_Rules
		a asp:RuleSet ;
		asp:asRules """
			cost(0,0).
			time(1..steps).
			number(C) :- C = #count{N : node(N)}.

			1 { move(G,T) : node(G) } 1 :- time(T).

			at(G,T) :- move(G,T), at(A,T-1), edge(A,G,_).
			cost(T,C1+C2) :- move(X,T), at(Y,T-1), edge(Y,X,C1), cost(T-1,C2), Y!=X.
			cost(Max) :- Max = #max{C : cost(T,C)}.

			:- move(G,T), not edge(A,G,_), at(A,T-1).
			:- not at(X,T), T = steps, goal(X).
		"""^^xsd:string .

	# ASP: RDF_EntailmentRules

	:RDF_EntailmentRules
		a asp:RuleSet ;
		asp:asRules """
			_p("rdf", "http://www.w3.org/1999/02/22-rdf-syntax-ns#") .
			_p("rdfs", "http://www.w3.org/2000/01/rdf-schema#") .
			_p("xsd", "http://www.w3.org/2001/XMLSchema#") .

			xsd(_l(L,T)) :- _t(_,_,_l(L,T)), T=="xsd:string" .
			xsd(_l(L,T)) :- _t(_,_,_l(L,T)), T=="xsd:boolean" .
			xsd(_l(L,T)) :- _t(_,_,_l(L,T)), T=="xsd:decimal" .
			xsd(_l(L,T)) :- _t(_,_,_l(L,T)), T=="xsd:float" .
			xsd(_l(L,T)) :- _t(_,_,_l(L,T)), T=="xsd:double" .
			xsd(_l(L,T)) :- _t(_,_,_l(L,T)), T=="xsd:short" .
			xsd(_l(L,T)) :- _t(_,_,_l(L,T)), T=="xsd:integer" .
			xsd(_l(L,T)) :- _t(_,_,_l(L,T)), T=="xsd:long" .

			_t(P,"rdf:type","rdf:Property") :- _t(S,P,O) .
			_t(_l(L,T),"rdf:type","rdfs:XMLLiteral") :- _t(S,P,_l(L,T)), xsd(_l(L,T)) .
			:- _t(_l(L,T),"rdf:type","rdfs:XMLLiteral"), not xsd(_l(L,T)) .
		"""^^xsd:string .

	# ASP: RDFS_EntailmentRules

	:RDFS_EntailmentRules
		a asp:RuleSet ;
		asp:asRules """
			_p("rdf", "http://www.w3.org/1999/02/22-rdf-syntax-ns#") .
			_p("rdfs", "http://www.w3.org/2000/01/rdf-schema#") .
			_p("xsd", "http://www.w3.org/2001/XMLSchema#") .

			literal(_l(L,T)) :- _t(_,_,_l(L,T)) .
			literal(_l(L,T)) :- xsd(_l(L,T)) .

			_t(_l(L,T),"rdf:type","rdfs:Literal") :- _t(S,P,_l(L,T)), literal(_l(L,T)) .
			:- _t(_l(L,T),"rdf:type","rdfs:Literal"), not literal(_l(L,T)) .

			_t(U,"rdf:type",X) :- _t(A,"rdfs:domain",X), _t(U,A,V) .
			_t(V,"rdf:type",X) :- _t(A,"rdfs:range",X), _t(U,A,V) .
			_t(X,"rdf:type",B) :- _t(A,"rdfs:domain",B), _t(X,C,Y), _t(C,"rdfs:subPropertyOf",B) .
			_t(Y,"rdf:type",B) :- _t(A,"rdfs:range",B), _t(X,C,Y), _t(C,"rdfs:subPropertyOf",B) .
			_t(U,"rdf:type","rdfs:Resource") :- _t(U,A,X) .
			_t(V,"rdf:type","rdfs:Resource") :- _t(U,A,V) .
			_t(U,"rdfs:subPropertyOf",X) :- _t(U,"rdfs:subPropertyOf",V), _t(V,"rdfs:subPropertyOf",X) .
			_t(U,"rdfs:subPropertyOf",U) :- _t(U,"rdf:type","rdf:Property") .
			_t(U,B,Y) :- _t(A,"rdfs:subPropertyOf",B), _t(U,A,Y) .
			_t(U,"rdfs:subClassOf","rdfs:Resource") :- _t(U,"rdf:type","rdfs:Class") .
			_t(V,"rdf:type",X) :- _t(U,"rdfs:subClassOf",X), _t(V,"rdf:type",U) .
			_t(U,"rdfs:subClassOf",U) :- _t(U,"rdf:type","rdfs:Class") .
			_t(U,"rdfs:subClassOf",X) :- _t(U,"rdfs:subClassOf",V), _t(V,"rdfs:subClassOf",X) .
			_t(U,"rdfs:subPropertyOf","rdfs:member") :- _t(U,"rdf:type","rdfs:cmp") .
			_t(U,"rdfs:subPropertyOf","rdfs:Literal") :- _t(U,"rdf:type","rdfs:Datatype") .
		"""^^xsd:string .
}

# --------------------------------
# JsonTest -----------------------
# --------------------------------

# JSON Input --------------------
# {
#   "venue":
#   {
#     "latitude": "51.0500000",
#     "longitude": "3.7166700"
#   },
#   "location":
#   {
#     "continent": " EU",
#     "country": "BE",
#     "city": "Brussels"
#  }
# }
# --------------------------------

	# see https://rml.io/specs/rml/ for an example input

:JsonTestMapping {

	:VenueMapping a rr:TriplesMap;
		rml:logicalSource [
			rml:source [
				a carml:Stream ;
			] ;
			rml:referenceFormulation ql:JSONPath;
			rml:iterator "$.message"
		];

		rr:subjectMap [
			rr:template "http://loc.example.com/city/{location.city}";
			rr:class schema:City
		];

		rr:predicateObjectMap [
			rr:predicate wgs84_pos:lat;
			rr:objectMap [
				rml:reference "venue.latitude"
			]
		];

		rr:predicateObjectMap [
			rr:predicate wgs84_pos:long;
			rr:objectMap [
				rml:reference "venue.longitude"
			]
		];

		rr:predicateObjectMap [
			rr:predicate gn:countryCode;
			rr:objectMap [
				rml:reference "location.country"
			]
		].
}

# --------------------------------
# CSVTest ------------------------
# --------------------------------

# CSV Input ----------------------
# id,stop,latitude,longitude
# 6523,25,50.901389,4.484444
# --------------------------------

:CSVTestMapping {

	# see https://rml.io/specs/rml/ for an example input

	:AirportMapping a rr:TriplesMap;
		rml:logicalSource [
			rml:source [
				a carml:Stream ;
			] ;
			rml:referenceFormulation ql:CSV
		];

		rr:subjectMap [
			rr:template "http://airport.example.com/{id}";
			rr:class transit:Stop
		];

		rr:predicateObjectMap [
			rr:predicate transit:route;
			rr:objectMap [
				rml:reference "stop";
				rr:datatype xsd:int
			]
		];

		rr:predicateObjectMap [
			rr:predicate wgs84_pos:lat;
			rr:objectMap [
				rml:reference "latitude"
			]
		];

		rr:predicateObjectMap [
			rr:predicate wgs84_pos:long;
			rr:objectMap [
			rml:reference "longitude"
			]
		].
}

# --------------------------------
# XMLTest ------------------------
# --------------------------------

# XML Input ----------------------
# <transport>
#     <bus id="25">
#         <route>
#             <stop id="645">International Airport</stop>
#             <stop id="651">Conference center</stop>
#         </route>
#     </bus>
# </transport>
# --------------------------------

:XMLTestMapping {

	# see https://rml.io/specs/rml/ for an example input

	:TransportMapping a rr:TriplesMap;
		rml:logicalSource [
			rml:source [
				a carml:Stream ;
			] ;
			rml:iterator "/transport/bus";
			rml:referenceFormulation ql:XPath;
		];

		rr:subjectMap [
			rr:template "http://trans.example.com/{@id}";
			rr:class transit:Stop
		];

		rr:predicateObjectMap [
			rr:predicate transit:stop;
			rr:objectMap [
				rml:reference "route/stop/@id";
				rr:datatype xsd:int
			]
		];

		rr:predicateObjectMap [
			rr:predicate rdfs:label;
			rr:objectMap [
				rml:reference "route/stop"
			]
		].
}

# --------------------------------
# TwinMap -----------------------
# --------------------------------

# JSON Input --------------------
# {
#   "message-type": "data",
#   "publisher-id": 123,
#	"publisher-name": "DFKI",
#	"publisher-version": 1,
#	"publisher-description": "action input",
#	"timestamp": "2007-12-24T18:21Z",
#	"data": {
#		"actionID": "12345"
#	}
# }
# --------------------------------

	# see https://rml.io/specs/rml/ for an example input

:JsonTwinMapMapping {

	:MessageMapping a rr:TriplesMap;
		rml:logicalSource [
			rml:source [
				a carml:Stream ;
			] ;
			rml:referenceFormulation ql:JSONPath;
			rml:iterator "$"
		];

		rr:subjectMap [
			rr:template "http://www.dfki.de/twinmap-ns#Message_{timestamp}";
			rr:class twinmap:Message
		];

		rr:predicateObjectMap [
			rr:predicate twinmap:type;
			rr:objectMap [
				rml:reference "message-type";
				rr:datatype xsd:string
			]
		];

		rr:predicateObjectMap [
			rr:predicate twinmap:pub_id;
			rr:objectMap [
				rml:reference "publisher-id";
				rr:datatype xsd:int
			]
		];
		
		rr:predicateObjectMap [
			rr:predicate twinmap:pub_name;
			rr:objectMap [
				rml:reference "publisher-name";
				rr:datatype xsd:string
			]
		];
		
		rr:predicateObjectMap [
			rr:predicate twinmap:pub_version;
			rr:objectMap [
				rml:reference "publisher-version";
				rr:datatype xsd:int
			]
		];
		
		rr:predicateObjectMap [
			rr:predicate twinmap:pub_description;
			rr:objectMap [
				rml:reference "publisher-description";
				rr:datatype xsd:string
			]
		];

		rr:predicateObjectMap [
			rr:predicate twinmap:timestamp;
			rr:objectMap [
				rml:reference "timestamp";
				rr:datatype xsd:string
			]
		];
		
		rr:predicateObjectMap [
			rr:predicate twinmap:data;
			rr:objectMap [
				rr:template "http://www.dfki.de/twinmap-ns#Message_{timestamp}_{data.actionID}";
				rr:termType rr:IRI;
			]
		].
		
	:DataMapping a rr:TriplesMap;
		rml:logicalSource [
			rml:source [
				a carml:Stream ;
			] ;
			rml:referenceFormulation ql:JSONPath;
			rml:iterator "$"
		];

		rr:subjectMap [
			rr:template "http://www.dfki.de/twinmap-ns#Message_{timestamp}_{data.actionID}";
			rr:class twinmap:Data
		];

		rr:predicateObjectMap [
			rr:predicate twinmap:actionID;
			rr:objectMap [
				rml:reference "data.actionID";
				rr:datatype xsd:string
			]
		].
}