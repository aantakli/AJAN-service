# @base <http://localhost:8090/rdf4j/repositories/domain#> .

@prefix agents: <http://localhost:8090/rdf4j/repositories/agents#> .
@prefix behaviors: <http://localhost:8090/rdf4j/repositories/behaviors#> .
@prefix : <http://localhost:8090/rdf4j/repositories/domain#> .
@prefix services: <http://localhost:8090/rdf4j/repositories/services#> .

@prefix dct: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix ajan: <http://www.ajan.de/ajan-ns#> .
@prefix bt: <http://www.ajan.de/behavior/bt-ns#> .
@prefix asp: <http://www.ajan.de/behavior/asp-ns#> .
@prefix mosim: <http://www.dfki.de/mosim-ns#> .
@prefix suite: <http://www.dfki.de/suite-ns#> .
@prefix aml: <https://w3id.org/i40/aml#> .
@prefix test: <http://test.de#> .
@prefix wgs84_pos: <http://www.w3.org/2003/01/geo/wgs84_pos#>.
@prefix transit: <http://vocab.org/transit/terms/>.
@prefix gn: <http://www.geonames.org/ontology#>.

@prefix rr: <http://www.w3.org/ns/r2rml#>.
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix ex:     <http://www.example.com/>.
@prefix carml: <http://carml.taxonic.com/carml/> .


ajan:ASP {
	:Cockpit_LP
		a asp:RuleSet ;
		asp:asRules """
			% -----------------------------------
			% General Rules
			% -----------------------------------

			% Boiler -->

			connection(X) :- screw_connection(X) .
			connection(X) :- screw_clamp_connection(X) .
			connection(X) :- plugin_connection(X) .

			component(X) :- assembly_component(X) .
			component(X) :- screw(X) .
			component(X) :- nut(X) .
			component(X) :- washer(X) .

			washer(X) :- spring_washer(X) .
			srew(X) :- safety_screw_with_torque(X) .
			tool(X) :- screw_driver(X) .

			has_component(X,COMP) :- has_screw(X,COMP) .
			has_component(X,COMP) :- has_nut(X,COMP) .
			has_component(X,COMP) :- has_washer(X,COMP) .

			% The needed instance informations are defined in components.lp
			% -----------------------------------
			tighten_with(POINT,TOOL,TORQUE,UNIT) :- action(tighten,CONN,POINT,SCREW,STEP), 
													safety_screw_with_torque(SCREW), 
													has_optimal_torque(SCREW,TORQUE,UNIT), 
													tool(TOOL), has_max_torque(MAX,UNIT), 
													has_min_torque(MIN,UNIT), 
													MIN <= TORQUE, 
													MAX >= TORQUE .

			% <-- Boiler

			% -----------------------------------
			% Processing Rules
			% -----------------------------------

			connection_step(0..END-1) :- END = #count{CONN: connection(CONN)} .

			1{plan_connection(CONN,STEP): connection(CONN)}1 :- connection_step(STEP) .

			:- plan_connection(CONN,STEP_A), plan_connection(CONN,STEP_B), STEP_A != STEP_B .

			action(assemble,CONN,STEP) :- plan_connection(CONN,STEP) .


			% Action Rules
			% -----------------------------------

			action(ACTION,CONN,A,B,SUM + 1 + SUB_STEP) :- action(ACTION,CONN,A,B,STEP_A,SUB_STEP), SUM = #sum{S,STEP : sub_actions(CONN,STEP,S), STEP < STEP_A} .

			% -----------------------------------
			% RESULT Filters
			% -----------------------------------

			%#show connection/1 .

			%#show action/6 .
			#show action/5 .
			#show action/3 .

			% -----------------------------------
			% Planning RESULT
			% -----------------------------------

			% action(position,BASE,STAUKASTEN,1)

			% Vorarbeit fÃ¼r die zwei Sechkantschrauben mit Muttern
			% -----------------------------------
			% action(turnon,SCREW_6KANT_1,MUTTER_1,2)
			% action(turnon,SCREW_6KANT_1,MUTTER_2,3)
			% action(turnon,SCREW_6KANT_1,MUTTER_3,4)
			% action(turnon,SCREW_6KANT_2,MUTTER_4,5)
			% action(turnon,SCREW_6KANT_2,MUTTER_5,6)
			% action(turnon,SCREW_6KANT_2,MUTTER_6,7)
			% action(insert,STAUKASTEN_POINT_1,SCREW_6KANT_1,8)
			% action(tighten,STAUKASTEN_POINT_1,MUTTER_3,9)
			% action(insert,STAUKASTEN_POINT_2,SCREW_6KANT_2,10)
			% action(tighten,STAUKASTEN_POINT_2,MUTTER_6,11)

			% Festschrauben der vorbereiteten Schrauben
			% -----------------------------------
			% action(position,STAUKASTEN_CONN_1,SUB_STAUKASTEN,12)
			% action(adjust,STAUKASTEN_CONN_1,SUB_STAUKASTEN,13)
			% action(tighten,STAUKASTEN_POINT_1,MUTTER_1,14)
			% action(tighten,STAUKASTEN_POINT_1,MUTTER_2,15)
			% action(tighten,STAUKASTEN_POINT_2,MUTTER_4,16)
			% action(tighten,STAUKASTEN_POINT_2,MUTTER_5,17)

			% Festschrauben der 2 Sechskantschrauben
			% -----------------------------------
			% action(insert,STAUKASTEN_POINT_3,SCREW_6KANT_3,18)
			% action(tighten,STAUKASTEN_POINT_3,SCREW_6KANT_3,19)
			% action(insert,STAUKASTEN_POINT_4,SCREW_6KANT_4,20)
			% action(tighten,STAUKASTEN_POINT_4,SCREW_6KANT_4,21)

			% Festschrauben der 2 Blechschrauben
			% -----------------------------------
			% action(insert,STAUKASTEN_POINT_5,SCREW_BLECH_5,22)
			% action(tighten,STAUKASTEN_POINT_5,SCREW_BLECH_5,23)
			% action(insert,STAUKASTEN_POINT_6,SCREW_BLECH_6,24)
			% action(tighten,STAUKASTEN_POINT_6,SCREW_BLECH_6,25)

			% Festschrauben der Abdeckung
			% -----------------------------------
			% action(position,STAUKASTEN_CONN_2,ABDECKUNG,12)
		"""^^xsd:string .

	:Components_LP
		a asp:RuleSet ;
		asp:asRules """
			% -----------------------------------
			% Component Facts
			% -----------------------------------

			% Annota/Boiler -->

			base(storage_box_console_1) .
			base(storage_box_console_1) .
			assembly_component(storage_box_console_1) .
			assembly_component(storage_box_1) .
			assembly_component(storage_box_cover_1) .

			screw(screw_1) .
			screw(screw_2) .
			screw(screw_3) .
			screw(screw_4) .
			screw(screw_5) .
			screw(screw_6) .

			nut(nut_1) .
			nut(nut_2) .
			nut(nut_3) .
			nut(nut_4) .
			nut(nut_5) .
			nut(nut_6) .

			safety_screw_with_torque(sechskant_schraube) .
			has_optimal_torque(sechskant_schraube,12344,"nm") .

			screw_driver(bosch_screw_driver) .
			has_max_torque(bosch_screw_driver,12345,"nm") .
			has_min_torque(bosch_screw_driver,1234,"nm") .

			% <-- Annota/Boiler
		"""^^xsd:string .
		
	:Connections_LP
		a asp:RuleSet ;
		asp:asRules """
			% Annota/Boiler -->

			% -----------------------------------
			% Screw Clamp Connection Facts (Storage Box)
			% -----------------------------------

			has_prepro_location(storage_box_1,prepro_location_1) .
			has_connection_point(prepro_location_1,prepro_point_1) .

			position_point(prepro_point_1) .
			has_opening(screw_point_1,prepro_location_1,hole_1) .
			has_opening(screw_point_1,storage_box_1,hole_2) .

			screw_clamp_connection(storage_box_console_connection_1) .

			has_connection_point(storage_box_console_connection_1,screw_point_1) .
			has_connection_point(storage_box_console_connection_1,screw_point_2) .

			screw_point(screw_point_1) .
			has_opening(screw_point_1,storage_box_console_1,hole_3) .
			has_opening(screw_point_1,storage_box_1,hole_2) .
			has_screw(screw_point_1,screw_1) .
			has_nut(screw_point_1,nut_1) .
			has_nut(screw_point_1,nut_2) .
			has_nut(screw_point_1,nut_3) .

			screw_point(screw_point_2) .
			has_screw(screw_point_2,screw_2) .
			has_opening(screw_point_2,storage_box_console_1,hole_4) .
			has_opening(screw_point_2,storage_box_1,hole_5) .
			has_nut(screw_point_2,nut_4) .
			has_nut(screw_point_2,nut_5) .
			has_nut(screw_point_2,nut_6) .

			has_base(storage_box_console_connection_1,storage_box_console_1) .
			has_connected_component(storage_box_console_connection_1,storage_box_console_1,0) .
			has_connected_component(storage_box_console_connection_1,storage_box_1,1) .

			has_connection_point_connection(storage_box_console_1,screw_point_1) .
			has_connection_point_connection(storage_box_console_1,screw_point_2) .

			has_connection_point_connection(storage_box_1,screw_point_1) .
			has_connection_point_connection(storage_box_1,screw_point_2) .


			% -----------------------------------
			% Screw Connection Facts (Sechskantschrauben)
			% -----------------------------------

			screw_connection(storage_box_connection_sechskant) .

			has_connection_point(storage_box_connection_sechskant,screw_point_3) .
			has_connection_point(storage_box_connection_sechskant,screw_point_4) .

			screw_point(screw_point_3) .
			has_opening(screw_point_3,storage_box_1,hole_6) .
			has_screw(screw_point_3,screw_3) .
			has_nut(screw_point_3,nut_3) .

			screw_point(screw_point_4) .
			has_opening(screw_point_4,storage_box_1,hole_7) .
			has_screw(screw_point_4,screw_4) .
			has_washer(screw_point_4,washer_4) .

			has_base(storage_box_connection_sechskant,storage_box_1) .
			has_connected_component(storage_box_connection_sechskant,storage_box_1,0) .

			has_connection_point_connection(storage_box_1,screw_point_3) .
			has_connection_point_connection(storage_box_1,screw_point_4) .


			% -----------------------------------
			% Screw Connection Facts (Blechschrauben)
			% -----------------------------------

			screw_connection(storage_box_connection_blech) .

			has_connection_point(storage_box_connection_blech,screw_point_5) .
			has_connection_point(storage_box_connection_blech,screw_point_6) .

			screw_point(screw_point_5) .
			has_opening(screw_point_5,storage_box_1,hole_8) .
			has_screw(screw_point_5,screw_5) .

			screw_point(screw_point_6) .
			has_opening(screw_point_6,storage_box_1,hole_9) .
			has_screw(screw_point_6,screw_6) .

			has_base(storage_box_connection_blech,storage_box_1) .
			has_connected_component(storage_box_connection_blech,storage_box_1,0) .

			has_connection_point_connection(storage_box_1,screw_point_5) .
			has_connection_point_connection(storage_box_1,screw_point_6) .


			% -----------------------------------
			% Plug-in Connection Facts (Cover)
			% -----------------------------------

			plugin_connection(storage_box_connection_cover) .

			has_connection_point(storage_box_connection_cover,plugin_point_1) .

			plugin_point(plugin_point_1) .
			has_opening(plugin_point_1,storage_box_1,hole_10) .

			has_base(storage_box_connection_cover,storage_box_1) .
			has_connected_component(storage_box_connection_cover,storage_box_1,0) .
			has_connected_component(storage_box_connection_cover,storage_box_cover_1,1) .

			has_connection_point_connection(storage_box_1,plugin_point_1) .
			has_connection_point_connection(storage_box_cover_1,plugin_point_1) .

			% <-- Annota/Boiler
		"""^^xsd:string .

	:Screw_Planning_LP
		a asp:RuleSet ;
		asp:asRules """
			% -----------------------------------
			% Processing Rules
			% -----------------------------------

			screw_connection_start(CONN,END + 1) :- screw_connection(CONN), END = 0 .
			screw_connection_end(CONN,END) :- screw_tighten_end(CONN,END) .

			% Assembly_Component Planning Rules
			% -----------------------------------

			screw_assemble_start(CONN,STEP) :- screw_connection_start(CONN,STEP) .
			screw_step(CONN,screw_assemble_step(START..START)) :- screw_assemble_start(CONN,START) .
			screw_assemble_end(CONN,STEP) :- screw_assemble_start(CONN,STEP), COUNT != 0, COUNT = #count{COMP : has_connected_component(CONN,COMP,ORDER), ORDER != 0}.

			action(position,CONN,COMP_A,COMP_B,STEP,SUB_STEP-1) :- screw_step(CONN,screw_assemble_step(STEP)), has_connected_component(CONN,COMP_A,SUB_STEP-1), has_connected_component(CONN,COMP_B,SUB_STEP), COMP_A != COMP_B.

			sub_actions(CONN,STEP,S) :- S = #count{Y : action(_,CONN,_,_,STEP,Y), screw_step(CONN,screw_assemble_step(STEP))}, screw_step(CONN,screw_assemble_step(STEP)) .


			% Screw_Point Planning Rules
			% -----------------------------------

			screw_insert_start(CONN,STEP+1) :- screw_assemble_end(CONN,STEP) .
			screw_insert_start(CONN,STEP) :- not screw_assemble_end(CONN,STEP), screw_connection_start(CONN,STEP) .
			screw_step(CONN,screw_insert_step(START..START+END-1)) :- screw_insert_start(CONN,START), END = #count{POINT : has_connection_point(CONN,POINT)} .
			screw_insert_end(CONN,STEP+COUNT) :- screw_insert_start(CONN,STEP), COUNT = #count{POINT : has_connection_point(CONN,POINT)}.

			1{screw_action(POINT,CONN,STEP): has_connection_point(CONN,POINT)}1 :- screw_step(CONN,screw_insert_step(STEP)) .
			:- screw_action(POINT,CONN,STEP_A), screw_action(POINT,CONN,STEP_B), STEP_A != STEP_B .

			action(position,CONN,POINT,COMP,STEP,0) :- screw_action(POINT,CONN,STEP), has_washer(POINT,COMP) .
			action(insert,CONN,POINT,COMP,STEP,0) :- screw_action(POINT,CONN,STEP), has_screw(POINT,COMP), not has_washer(POINT,_) .
			action(insert,CONN,POINT,COMP,STEP,1) :- screw_action(POINT,CONN,STEP), has_screw(POINT,COMP), has_washer(POINT,_) .
			action(turnon,CONN,POINT,COMP,STEP,1) :- screw_action(POINT,CONN,STEP), has_nut(POINT,COMP), not has_washer(POINT,_) .
			action(turnon,CONN,POINT,COMP,STEP,2) :- screw_action(POINT,CONN,STEP), has_nut(POINT,COMP), has_washer(POINT,_) .

			sub_actions(CONN,STEP,S) :- S = #count{Y : action(_,CONN,_,_,STEP,Y)}, screw_step(CONN,screw_insert_step(STEP)) .


			% Tighten Planning Rules
			% -----------------------------------

			screw_tighten_start(CONN,STEP+1) :- screw_insert_end(CONN,STEP) .
			screw_step(CONN,screw_tighten_step(START..START+END-1)) :- screw_tighten_start(CONN,START), END = #count{POINT : has_connection_point(CONN,POINT)} .
			screw_tighten_end(CONN,STEP+COUNT) :- screw_tighten_start(CONN,STEP), COUNT = #count{POINT : has_connection_point(CONN,POINT)}.

			1{tighten_action(POINT,CONN,STEP,0): has_connection_point(CONN,POINT)}1 :- screw_step(CONN,screw_tighten_step(STEP)) .

			:- tighten_action(POINT,CONN,STEP_A,0), tighten_action(POINT,CONN,STEP_B,0), STEP_A != STEP_B .

			action(tighten,CONN,POINT,COMP,STEP,0) :- tighten_action(POINT,CONN,STEP,0), has_screw(POINT,COMP), not has_nut(POINT,_) .
			action(tighten,CONN,POINT,COMP,STEP,0) :- tighten_action(POINT,CONN,STEP,0), has_nut(POINT,COMP) .

			sub_actions(CONN,STEP,S) :- S = #count{Y : action(_,CONN,_,_,STEP,Y)}, screw_step(CONN,screw_tighten_step(STEP)) .
		"""^^xsd:string .

	:Screw_Clamp_Preprocessing_LP
		a asp:RuleSet ;
		asp:asRules """
			% -----------------------------------
			% Preprocessing Rules
			% -----------------------------------

			screw_clamp_prepro_start(CONN,START) :- screw_clamp_connection_start(CONN,START) .
			screw_clamp_prepro_end(CONN,END) :- screw_clamp_prepro_assemble_last(CONN,END) .


			% Position preprocessing Planning Rules
			% -----------------------------------

			screw_clamp_prepro_position_start(CONN,STEP) :- screw_clamp_prepro_start(CONN,STEP) .
			screw_clamp_prepro_position_end(CONN,STEP) :- screw_clamp_prepro_position_start(CONN,STEP) .

			action(position,CONN,POINT,COMP,STEP,0) :- screw_clamp_prepro_position_start(CONN,STEP), has_connected_component(CONN,COMP,_), has_prepro_location(COMP,LOCATION), has_connection_point(LOCATION,POINT) .

			sub_actions(CONN,STEP,S) :- S = #count{Y : action(_,CONN,_,_,STEP,Y)}, screw_clamp_prepro_position_start(CONN,STEP) .


			% Turnon preprocessing Planning Rules
			% -----------------------------------

			screw_clamp_prepro_turnon_start(CONN,END + 1) :- screw_clamp_prepro_position_end(CONN,END) .

			connection_prepro_steps(CONN,NUM) :- NUM = #count{POINT : has_connection_point(CONN,POINT)}, screw_clamp_connection(CONN) .
			screw_clamp_prepro_step(CONN,screw_clamp_turnon_step(START..START+END-1)) :- screw_clamp_prepro_turnon_start(CONN,START), connection_prepro_steps(CONN,END) .
			screw_clamp_prepro_sub_step(POINT,screw_clamp_prepro_turnon_sub_step(0..END-1)) :- END = #count{NUT : has_nut(POINT,NUT)}, screw_clamp_connection(CONN), has_connection_point(CONN,POINT) .
			screw_clamp_prepro_turnon_last(CONN,COUNT + START - 1) :- COUNT = #count{NUT : has_nut(POINT,NUT), has_connection_point(CONN,POINT)}, screw_clamp_prepro_turnon_start(CONN,START) .

			1{turnon_screw_clamp_point(CONN,POINT,STEP): has_connection_point(CONN,POINT)}1 :- screw_clamp_prepro_step(CONN,screw_clamp_turnon_step(STEP)).

			:- turnon_screw_clamp_point(CONN,POINT,STEP_A), turnon_screw_clamp_point(CONN,POINT,STEP_B), STEP_A != STEP_B .

			1{selected_nut_order(POINT,NUT,STEP): has_nut(POINT,NUT)}1 :- screw_clamp_prepro_sub_step(POINT,screw_clamp_prepro_turnon_sub_step(STEP)), has_connection_point(CONN,POINT), screw_clamp_connection(CONN) .

			first_nut(POINT,NUT) :- selected_nut_order(POINT,NUT,0) .
			-first_nut(POINT,NUT) :- not first_nut(POINT,NUT), has_nut(POINT,NUT) .
			last_nut(POINT,NUT) :- MAX = #max{STEP : selected_nut_order(POINT,NUT,STEP)}, selected_nut_order(POINT,NUT,MAX) .

			action(turnon,CONN,POINT,NUT,STEP,SUB_STEP) :- selected_nut_order(POINT,NUT,SUB_STEP), turnon_screw_clamp_point(CONN,POINT,STEP), has_connection_point(CONN,POINT) .

			:- action(turnon,CONN,POINT,NUT,STEP,SUB_STEP_A), action(turnon,CONN,POINT,NUT,STEP,SUB_STEP_B), SUB_STEP_A != SUB_STEP_B.
			:- action(turnon,CONN,POINT,NUT,STEP_A,SUB_STEP), action(turnon,CONN,POINT,NUT,STEP_B,SUB_STEP), STEP_A != STEP_B.

			sub_actions(CONN,STEP,S) :- S = #count{Y : action(_,CONN,_,_,STEP,Y)}, screw_clamp_prepro_step(CONN,screw_clamp_turnon_step(STEP)) .


			% Insert preprocessing Planning Rules
			% -----------------------------------

			screw_clamp_prepro_assemble_start(CONN,END + 1) :- screw_clamp_prepro_turnon_last(CONN,END) .
			screw_clamp_prepro_step(CONN,screw_clamp_assemble_step(START..START+END-1)) :- screw_clamp_prepro_assemble_start(CONN,START), connection_prepro_steps(CONN,END) .
			screw_clamp_prepro_sub_step(POINT,screw_clamp_prepro_assemble_sub_step(0..2)) :- screw_clamp_prepro_step(CONN,screw_clamp_assemble_step(END)), has_connection_point(CONN,POINT).
			screw_clamp_prepro_assemble_last(CONN,COUNT + START - 1) :- COUNT = #count{STEP : screw_clamp_prepro_sub_step(POINT,screw_clamp_prepro_assemble_sub_step(STEP)), has_connection_point(CONN,POINT)}, screw_clamp_prepro_assemble_start(CONN,START) .

			1{assemble_screw_clamp_point(CONN,POINT,STEP): has_connection_point(CONN,POINT)}1 :- screw_clamp_prepro_step(CONN,screw_clamp_assemble_step(STEP)).

			:- assemble_screw_clamp_point(CONN,POINT,STEP_A), assemble_screw_clamp_point(CONN,POINT,STEP_B), STEP_A != STEP_B .

			action(insert,CONN,POINT,SCREW,STEP,0) :- assemble_screw_clamp_point(CONN,POINT,STEP), has_screw(POINT,SCREW) .
			action(tighten,CONN,POINT,SCREW,STEP,1) :- assemble_screw_clamp_point(CONN,POINT,STEP), has_screw(POINT,SCREW) .

			sub_actions(CONN,STEP,S) :- S = #count{Y : action(_,CONN,_,_,STEP,Y)}, screw_clamp_prepro_step(CONN,screw_clamp_assemble_step(STEP)) .
		"""^^xsd:string .

	:Screw_Clamp_Planning_LP
		a asp:RuleSet ;
		asp:asRules """
			% -----------------------------------
			% Processing Rules
			% -----------------------------------

			screw_clamp_connection_start(CONN,END + 1) :- screw_clamp_connection(CONN), END = 0 .

			% Position processing Planning Rules
			% -----------------------------------

			screw_clamp_position_start(CONN,STEP+1) :- screw_clamp_prepro_end(CONN,STEP) .
			screw_clamp_position_end(CONN,STEP) :- screw_clamp_position_start(CONN,STEP) .

			action(position,CONN,POINT,COMP,STEP,0) :- screw_clamp_position_start(CONN,STEP), has_connected_component(CONN,COMP,1), has_connection_point(CONN,POINT), has_base(CONN,LOCATION) .

			sub_actions(CONN,STEP,S) :- S = #count{Y : action(_,CONN,_,_,STEP,Y)}, screw_clamp_position_start(CONN,STEP) .


			% Adjust processing Planning Rules
			% -----------------------------------

			screw_clamp_adjust_start(CONN,STEP+1) :- screw_clamp_position_end(CONN,STEP) .
			screw_clamp_step(CONN,screw_clamp_adjust_step(START..START+END-1)) :- screw_clamp_adjust_start(CONN,START), END = #count{POINT : has_connection_point(CONN,POINT)} .
			screw_clamp_adjust_end(CONN,STEP+COUNT) :- screw_clamp_adjust_start(CONN,STEP), COUNT = #count{POINT : has_connection_point(CONN,POINT)}.

			1{adjust_action(CONN,POINT,STEP): has_connection_point(CONN,POINT)}1 :- screw_clamp_step(CONN,screw_clamp_adjust_step(STEP)) .

			:- adjust_action(CONN,POINT,STEP_A), adjust_action(CONN,POINT,STEP_B), STEP_A != STEP_B .

			action(adjust,CONN,POINT,NUT,STEP,0) :- adjust_action(CONN,POINT,STEP), selected_nut_order(POINT,NUT,0) .

			sub_actions(CONN,STEP,S) :- S = #count{Y : action(_,CONN,_,_,STEP,Y)}, screw_clamp_adjust_start(CONN,STEP) .


			% Tightening processing Planning Rules
			% -----------------------------------

			screw_clamp_tighten_start(CONN,STEP+1) :- screw_clamp_adjust_end(CONN,STEP) .
			screw_clamp_step(CONN,screw_clamp_tighten_step(START..START+END-1)) :- screw_clamp_tighten_start(CONN,START), END = #count{POINT : has_connection_point(CONN,POINT)} .
			screw_clamp_tighten_end(CONN,STEP) :- screw_clamp_adjust_start(CONN,STEP), COUNT = #count{POINT : has_connection_point(CONN,POINT)}.

			1{tighten_action(CONN,POINT,STEP): has_connection_point(CONN,POINT)}1 :- screw_clamp_step(CONN,screw_clamp_tighten_step(STEP)) .

			:- tighten_action(CONN,POINT,STEP_A), tighten_action(CONN,POINT,STEP_B), STEP_A != STEP_B .

			action(tighten,CONN,POINT,NUT,STEP,SUB_STEP) :- tighten_action(CONN,POINT,STEP), -first_nut(POINT,NUT), selected_nut_order(POINT,NUT,SUB_STEP) .

			sub_actions(CONN,STEP,S) :- S = #count{Y : action(_,CONN,_,_,STEP,Y)}, screw_clamp_tighten_start(CONN,STEP) .
		"""^^xsd:string .

	:Plugin_Planning_LP
		a asp:RuleSet ;
		asp:asRules """
			% -----------------------------------
			% Plug-in Rules
			% -----------------------------------

			plugin_connection_start(CONN,END + 1) :- plugin_connection(CONN), END = 0 .
			plugin_connection_end(CONN,END) :- plugin_position_end(CONN,END) .

			% Assemble Planning Rules
			% -----------------------------------

			plugin_assemble_start(CONN,STEP) :- plugin_connection_start(CONN,STEP) .
			plugin_step(CONN,plugin_assemble_step(START..START)) :- plugin_assemble_start(CONN,START) .
			plugin_assemble_end(CONN,STEP) :- plugin_assemble_start(CONN,STEP), COUNT != 0, COUNT = #count{COMP : has_connected_component(CONN,COMP,ORDER), ORDER != 0}.

			action(position,CONN,POINT,COMP_B,STEP,SUB_STEP-1) :- plugin_step(CONN,plugin_assemble_step(STEP)), has_connection_point(CONN,POINT), has_connected_component(CONN,COMP_A,SUB_STEP-1), has_connected_component(CONN,COMP_B,SUB_STEP), COMP_A != COMP_B.

			sub_actions(CONN,STEP,S) :- S = #count{Y : action(_,CONN,_,_,STEP,Y), plugin_step(CONN,plugin_assemble_step(STEP))}, plugin_step(CONN,plugin_assemble_step(STEP)) .
		"""^^xsd:string .
}
