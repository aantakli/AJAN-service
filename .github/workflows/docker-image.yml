name: docker-build-and-publish

on:
  push:
    branches:
      - 'master'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      commit_hash: ${{ steps.commit.outputs.short }}
    steps:
      - name: Get commit Hash
        id: commit
        uses: pr-mpt/actions-commit-hash@v1
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.3
        with:
          maven-version: 3.3.9
      - name: Build project with Maven
        run: mvn install
      - name: Create distribution directory
        run: mkdir -p dist/pluginsystem/plugins
      - name: Copy artifacts to distribution directory
        run: |
          cp ./triplestore/target/triplestore-0.1-war-exec.jar dist/
          cp ./executionservice/target/executionservice-0.1.jar dist/
          cp -r ./pluginsystem/loader/target/* dist/pluginsystem/
          cp -r ./pluginsystem/plugins/ASPPlugin/target/* dist/pluginsystem/plugins/
          cp -r ./pluginsystem/plugins/MappingPlugin/target/* dist/pluginsystem/plugins/
          cp -r ./pluginsystem/plugins/MOSIMPlugin/target/* dist/pluginsystem/plugins/
          cp -r ./pluginsystem/plugins/StandardBTNodes/target/* dist/pluginsystem/plugins/
          cp -r ./pluginsystem/plugins/STRIPSPlugin/target/* dist/pluginsystem/plugins/
          cp -r ./pluginsystem/plugins/MQTTPlugin/target/* dist/pluginsystem/plugins/
          cp -r ./pluginsystem/plugins/PythonPlugin/target/* dist/pluginsystem/plugins/
          cp ./.github/*.sh dist/
          cp ./.github/*.bat dist/
      - name: Create .env file
        uses: "DamianReeves/write-file-action@master"
        with:
          path: ./dist/.env
          write-mode: overwrite
          contents: |
            VERSION="${{ steps.commit.outputs.short }}"
      - name: Zip release files
        uses: vimtor/action-zip@v1
        with:
          recursive: false
          files: ./dist/
          dest: ./dist/ajanservice-${{ steps.commit.outputs.short }}.zip
      - name: Upload distribution artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifact
          path: dist/

  docker:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download distribution artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-artifact
          path: .
      - name: Setup docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: aantakli/ajan-service
          tags: |
            type=raw,latest
            type=sha
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          args:
            AVERSION="${{ needs.build.outputs.commit_hash }}"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.GIT_TOKEN }}

  release:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download distribution artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-artifact
          path: dist
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build.outputs.commit_hash }}
          release_name: Release ${{ needs.build.outputs.commit_hash }}
          body: |
            Current version of the AJAN-service
          draft: false
          prerelease: false
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/ajanservice-${{ needs.build.outputs.commit_hash }}.zip
          asset_name: ajanservice-${{ needs.build.outputs.commit_hash }}.zip
          asset_content_type: application/zip
      - name: Upload triplestore artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/triplestore-0.1-war-exec.jar
          asset_name: triplestore-0.1-war-exec.jar
          asset_content_type: application/java-archive
      - name: Upload executionservice artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/executionservice-0.1.jar
          asset_name: executionservice-0.1.jar
          asset_content_type: application/java-archive